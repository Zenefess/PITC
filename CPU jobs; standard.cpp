/************************************************************
 * File: CPU jobs; standard.cpp         Created: 2025/01/21 *
 *                                    Last mod.: 2025/01/26 *
 *                                                          *
 * Desc:                                                    *
 *                                                          *
 * MIT license             Copyright (c) David William Bull *
 ************************************************************/

#include <cmath>
#include <typedefs.h>

// Non-simultaneous ALU operations only
void JobALU(si64& x) {
   for(ui8 i = 0; i < 16; ++i) {
      x *= 789ull / 13 + 501; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 7 - 294939;
      x *= 791ull / 14 + 502; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 9 - 294941;
      x *= 789ull / 13 + 501; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 7 - 294939;
      x *= 787ull / 11 + 500; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 5 - 294937;
      x *= 789ull / 13 + 501; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 7 - 294939;
      x *= 791ull / 14 + 502; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 9 - 294941;
      x *= 789ull / 13 + 501; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 7 - 294939;
      x *= 787ull / 11 + 500; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 5 - 294937;
      x *= 789ull / 13 + 501; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 7 - 294939;
      x *= 791ull / 14 + 502; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 9 - 294941;
      x *= 789ull / 13 + 501; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 7 - 294939;
      x *= 787ull / 11 + 500; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 5 - 294937;
      x *= 789ull / 13 + 501; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 7 - 294939;
      x *= 791ull / 14 + 502; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 9 - 294941;
      x *= 789ull / 13 + 501; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 7 - 294939;
      x *= 787ull / 11 + 500; x = ((i < 32 ? x << 1 : x >> 1) ^ -1) / 5 - 294937;
   }
}

// Non-simultaneous FPU operations only
void JobFPU(fl64& x) {
   for(ui8 i = 0; i < 16; ++i) {
      x = sqrt(1.12) / (abs(1.0 - sqrt(sqrt(x / 2.01)))  + 0.0001);
      x = sqrt(0.91) / (abs(1.0 - sqrt(sqrt(x / 2.011))) + 0.001);
      x = sqrt(1.15) / (abs(1.0 - sqrt(sqrt(x / 2.01)))  + 0.01);
      x = sqrt(0.85) / (abs(1.0 - sqrt(sqrt(x / 2.009))) + 0.1);
      x = sqrt(1.12) / (abs(1.0 - sqrt(sqrt(x / 2.01)))  + 0.0001);
      x = sqrt(0.91) / (abs(1.0 - sqrt(sqrt(x / 2.011))) + 0.001);
      x = sqrt(1.15) / (abs(1.0 - sqrt(sqrt(x / 2.01)))  + 0.01);
      x = sqrt(0.85) / (abs(1.0 - sqrt(sqrt(x / 2.009))) + 0.1);
      x = sqrt(1.12) / (abs(1.0 - sqrt(sqrt(x / 2.01)))  + 0.0001);
      x = sqrt(0.91) / (abs(1.0 - sqrt(sqrt(x / 2.011))) + 0.001);
      x = sqrt(1.15) / (abs(1.0 - sqrt(sqrt(x / 2.01)))  + 0.01);
      x = sqrt(0.85) / (abs(1.0 - sqrt(sqrt(x / 2.009))) + 0.1);
      x = sqrt(1.12) / (abs(1.0 - sqrt(sqrt(x / 2.01)))  + 0.0001);
      x = sqrt(0.91) / (abs(1.0 - sqrt(sqrt(x / 2.011))) + 0.001);
      x = sqrt(1.15) / (abs(1.0 - sqrt(sqrt(x / 2.01)))  + 0.01);
      x = sqrt(0.85) / (abs(1.0 - sqrt(sqrt(x / 2.009))) + 0.1);
      x *= x * 1.01010101010101 + 0.00021;
   }
}

// ALU + FPU operations only
void JobALU_FPU(fl64& x, si64& y) {
   for(ui8 i = 0; i < 16; ++i) {
      x = sqrt(1.12) / (abs(1.0 - sqrt(sqrt(x / 2.01))) + 0.0001);
      y *= 789ull / 13 + 501; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 7 - 294939;
      x = sqrt(0.91) / (abs(1.0 - sqrt(sqrt(x / 2.011))) + 0.001);
      y *= 791ull / 14 + 502; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 9 - 294941;
      x = sqrt(1.15) / (abs(1.0 - sqrt(sqrt(x / 2.01))) + 0.01);
      y *= 789ull / 13 + 501; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 7 - 294939;
      x = sqrt(0.85) / (abs(1.0 - sqrt(sqrt(x / 2.009))) + 0.1);
      y *= 787ull / 11 + 500; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 5 - 294937;
      x = sqrt(1.12) / (abs(1.0 - sqrt(sqrt(x / 2.01))) + 0.0001);
      y *= 789ull / 13 + 501; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 7 - 294939;
      x = sqrt(0.91) / (abs(1.0 - sqrt(sqrt(x / 2.011))) + 0.001);
      y *= 791ull / 14 + 502; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 9 - 294941;
      x = sqrt(1.15) / (abs(1.0 - sqrt(sqrt(x / 2.01))) + 0.01);
      y *= 789ull / 13 + 501; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 7 - 294939;
      x = sqrt(0.85) / (abs(1.0 - sqrt(sqrt(x / 2.009))) + 0.1);
      y *= 787ull / 11 + 500; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 5 - 294937;
      x = sqrt(1.12) / (abs(1.0 - sqrt(sqrt(x / 2.01))) + 0.0001);
      y *= 789ull / 13 + 501; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 7 - 294939;
      x = sqrt(0.91) / (abs(1.0 - sqrt(sqrt(x / 2.011))) + 0.001);
      y *= 791ull / 14 + 502; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 9 - 294941;
      x = sqrt(1.15) / (abs(1.0 - sqrt(sqrt(x / 2.01))) + 0.01);
      y *= 789ull / 13 + 501; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 7 - 294939;
      x = sqrt(0.85) / (abs(1.0 - sqrt(sqrt(x / 2.009))) + 0.1);
      y *= 787ull / 11 + 500; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 5 - 294937;
      x = sqrt(1.12) / (abs(1.0 - sqrt(sqrt(x / 2.01))) + 0.0001);
      y *= 789ull / 13 + 501; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 7 - 294939;
      x = sqrt(0.91) / (abs(1.0 - sqrt(sqrt(x / 2.011))) + 0.001);
      y *= 791ull / 14 + 502; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 9 - 294941;
      x = sqrt(1.15) / (abs(1.0 - sqrt(sqrt(x / 2.01))) + 0.01);
      y *= 789ull / 13 + 501; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 7 - 294939;
      x = sqrt(0.85) / (abs(1.0 - sqrt(sqrt(x / 2.009))) + 0.1);
      y *= 787ull / 11 + 500; y = ((i < 32 ? y << 1 : y >> 1) ^ -1) / 5 - 294937;
      x *= x * 1.01010101010101 + 0.00021;
   }
}
